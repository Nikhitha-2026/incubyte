{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Dialog, DialogActions, DialogContent, DialogTitle, Button, TextField } from \"@mui/material\";\n\n// const UserFormDialog = ({ open, onClose, onSubmit, user, existingUsers }) => {\n//   const [formData, setFormData] = useState({ name: \"\", email: \"\" });\n//   const [emailError, setEmailError] = useState(false);\n//   const [emailErrorMsg, setEmailErrorMsg] = useState(\"\");\n//   const [nameError, setNameError] = useState(false);\n//   const [nameErrorMsg, setNameErrorMsg] = useState(\"\");\n\n//   useEffect(() => {\n//     if (user) {\n//       setFormData(user); // Load user details for editing\n//     } else if (open) {\n//       setFormData({ name: \"\", email: \"\" }); // Clear the form for adding a new user\n//     }\n//   }, [user, open]);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//     if (name === \"email\") {\n//       validateEmail(value);\n//     }\n//     if (name === \"name\") {\n//       validateName(value);\n//     }\n//   };\n\n//   const handleSubmit = () => {\n//     const isNameValid = validateName(formData.name);\n//     const isEmailValid = validateEmail(formData.email);\n\n//     if (isNameValid && isEmailValid && !isEmailDuplicate(formData.email) && !isNameDuplicate(formData.name)) {\n//       onSubmit(formData);\n//       onClose(); // Close the popup after saving\n//     }\n//   };\n\n//   const validateEmail = (email) => {\n//     const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     const isValid = emailRegex.test(email);\n//     setEmailError(!isValid);\n//     setEmailErrorMsg(isValid ? \"\" : \"Enter a valid email address.\");\n//     return isValid;\n//   };\n\n//   const validateName = (name) => {\n//     const nameRegex = /^[A-Za-z\\s]+$/;\n//     const isValid = nameRegex.test(name);\n//     setNameError(!isValid);\n//     setNameErrorMsg(isValid ? \"\" : \"Name must only contain alphabets.\");\n//     return isValid;\n//   };\n\n//   const isEmailDuplicate = (email) => {\n//     // Check for duplicates, excluding the currently edited user's email\n//     const duplicate = existingUsers.some(\n//       (existingUser) => existingUser.email === email && (!user || existingUser.email !== user.email)\n//     );\n//     if (duplicate) {\n//       setEmailError(true);\n//       setEmailErrorMsg(\"This email is already in use.\");\n//     }\n//     return duplicate;\n//   };\n\n//   const isNameDuplicate = (name) => {\n//     // Check for duplicate name, excluding the currently edited user's name\n//     const duplicate = existingUsers.some(\n//       (existingUser) => existingUser.name === name && (!user || existingUser.name !== user.name)\n//     );\n//     if (duplicate) {\n//       setNameError(true);\n//       setNameErrorMsg(\"This name is already in use.\");\n//     }\n//     return duplicate;\n//   };\n\n//   return (\n//     <Dialog open={open} onClose={onClose}>\n//       <DialogTitle>{user ? \"Edit User\" : \"Add User\"}</DialogTitle>\n//       <DialogContent>\n//         <TextField\n//           label=\"Name\"\n//           fullWidth\n//           margin=\"normal\"\n//           name=\"name\"\n//           value={formData.name}\n//           onChange={handleChange}\n//           error={nameError}\n//           helperText={nameErrorMsg}\n//         />\n//         <TextField\n//           label=\"Email\"\n//           fullWidth\n//           margin=\"normal\"\n//           name=\"email\"\n//           value={formData.email}\n//           onChange={handleChange}\n//           error={emailError}\n//           helperText={emailErrorMsg}\n//         />\n//       </DialogContent>\n//       <DialogActions>\n//         <Button onClick={onClose} color=\"secondary\">\n//           Cancel\n//         </Button>\n//         <Button onClick={handleSubmit} color=\"primary\">\n//           Save\n//         </Button>\n//       </DialogActions>\n//     </Dialog>\n//   );\n// };\n\n// export default UserFormDialog;","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Downloads/incubyte/src/UserFormDialog.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Dialog, DialogActions, DialogContent, DialogTitle, Button, TextField } from \"@mui/material\";\r\n\r\n// const UserFormDialog = ({ open, onClose, onSubmit, user, existingUsers }) => {\r\n//   const [formData, setFormData] = useState({ name: \"\", email: \"\" });\r\n//   const [emailError, setEmailError] = useState(false);\r\n//   const [emailErrorMsg, setEmailErrorMsg] = useState(\"\");\r\n//   const [nameError, setNameError] = useState(false);\r\n//   const [nameErrorMsg, setNameErrorMsg] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (user) {\r\n//       setFormData(user); // Load user details for editing\r\n//     } else if (open) {\r\n//       setFormData({ name: \"\", email: \"\" }); // Clear the form for adding a new user\r\n//     }\r\n//   }, [user, open]);\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//     if (name === \"email\") {\r\n//       validateEmail(value);\r\n//     }\r\n//     if (name === \"name\") {\r\n//       validateName(value);\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     const isNameValid = validateName(formData.name);\r\n//     const isEmailValid = validateEmail(formData.email);\r\n\r\n//     if (isNameValid && isEmailValid && !isEmailDuplicate(formData.email) && !isNameDuplicate(formData.name)) {\r\n//       onSubmit(formData);\r\n//       onClose(); // Close the popup after saving\r\n//     }\r\n//   };\r\n\r\n//   const validateEmail = (email) => {\r\n//     const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n//     const isValid = emailRegex.test(email);\r\n//     setEmailError(!isValid);\r\n//     setEmailErrorMsg(isValid ? \"\" : \"Enter a valid email address.\");\r\n//     return isValid;\r\n//   };\r\n\r\n//   const validateName = (name) => {\r\n//     const nameRegex = /^[A-Za-z\\s]+$/;\r\n//     const isValid = nameRegex.test(name);\r\n//     setNameError(!isValid);\r\n//     setNameErrorMsg(isValid ? \"\" : \"Name must only contain alphabets.\");\r\n//     return isValid;\r\n//   };\r\n\r\n//   const isEmailDuplicate = (email) => {\r\n//     // Check for duplicates, excluding the currently edited user's email\r\n//     const duplicate = existingUsers.some(\r\n//       (existingUser) => existingUser.email === email && (!user || existingUser.email !== user.email)\r\n//     );\r\n//     if (duplicate) {\r\n//       setEmailError(true);\r\n//       setEmailErrorMsg(\"This email is already in use.\");\r\n//     }\r\n//     return duplicate;\r\n//   };\r\n\r\n//   const isNameDuplicate = (name) => {\r\n//     // Check for duplicate name, excluding the currently edited user's name\r\n//     const duplicate = existingUsers.some(\r\n//       (existingUser) => existingUser.name === name && (!user || existingUser.name !== user.name)\r\n//     );\r\n//     if (duplicate) {\r\n//       setNameError(true);\r\n//       setNameErrorMsg(\"This name is already in use.\");\r\n//     }\r\n//     return duplicate;\r\n//   };\r\n\r\n//   return (\r\n//     <Dialog open={open} onClose={onClose}>\r\n//       <DialogTitle>{user ? \"Edit User\" : \"Add User\"}</DialogTitle>\r\n//       <DialogContent>\r\n//         <TextField\r\n//           label=\"Name\"\r\n//           fullWidth\r\n//           margin=\"normal\"\r\n//           name=\"name\"\r\n//           value={formData.name}\r\n//           onChange={handleChange}\r\n//           error={nameError}\r\n//           helperText={nameErrorMsg}\r\n//         />\r\n//         <TextField\r\n//           label=\"Email\"\r\n//           fullWidth\r\n//           margin=\"normal\"\r\n//           name=\"email\"\r\n//           value={formData.email}\r\n//           onChange={handleChange}\r\n//           error={emailError}\r\n//           helperText={emailErrorMsg}\r\n//         />\r\n//       </DialogContent>\r\n//       <DialogActions>\r\n//         <Button onClick={onClose} color=\"secondary\">\r\n//           Cancel\r\n//         </Button>\r\n//         <Button onClick={handleSubmit} color=\"primary\">\r\n//           Save\r\n//         </Button>\r\n//       </DialogActions>\r\n//     </Dialog>\r\n//   );\r\n// };\r\n\r\n// export default UserFormDialog;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}